#! --nosymbolic
using native;

namespace ui;

private ref_counter;
private next_code;
private code;

private slider;
private UISlider;

private segmented;
private UISegmented;

private pop_up;
private UIPopUp;

private check_box;
private UICheckBox;


private label;
private UILabel;


// ui widgets reference counter
let ref_counter = ref 1000;
next_code = put ref_counter ( (get ref_counter) + 1);

// widget interface
interface widget with
  is_widget   w::widget;
  type_tag    w::widget;
  code        w::widget;
  name        w::widget;
  action      w::widget;
  value       w::widget;

  set_value   w::widget new;
end;

all_widgets = all is_widget;

type widget_list_t xs::list = all_widgets xs;


// Slider
type slider (UISlider code::int name::string value minimum::int maximum::int action) =
  minimum < maximum && (get value) >= minimum && (get value) <= maximum;

const slider_type_tag = 100;
type_tag _::slider = slider_type_tag;

Slider name::string value::int minimum::int maximum::int action = 
  UISlider next_code name (ref value) minimum maximum action;

code    (UISlider c _ _ _ _ _) = c;
name    (UISlider _ n _ _ _ _) = n;
value   (UISlider _ _ v _ _ _) = get v;
min     (UISlider _ _ _ m _ _) = m;
max     (UISlider _ _ _ _ m _) = m;
action  (UISlider _ _ _ _ _ a) = a;

set_value (UISlider _ _ v _ _ _) new::int = put v new;

type segmented (UISegmented code::int name::string value labels::list action) = all (typep string) labels;

const segmented_type_tag = 101;
type_tag _::segmented = segmented_type_tag;

Segmented name::string value::int labels::list action =
  UISegmented next_code name (ref value) labels action;

code    (UISegmented c _ _ _ _) = c;
name    (UISegmented _ n _ _ _) = n;
value   (UISegmented _ _ v _ _) = get v;
labels  (UISegmented _ _ _ l _) = l;
action  (UISegmented _ _ _ _ a) = a;

set_value (UISegmented _ _ v _ _) new::int = put v new;

type pop_up (UIPopUp code::int name::string value labels::list action) =  all (typep string) labels;

const pop_up_type_tag = 102;
type_tag _::pop_up = pop_up_type_tag;

PopUp name::string value::int labels::list action =
  UIPopUp next_code name (ref value) labels action;

code    (UIPopUp c _ _ _ _) = c;
name    (UIPopUp _ n _ _ _) = n;
value   (UIPopUp _ _ v _ _) = get v;
labels  (UIPopUp _ _ _ l _) = l;
action  (UIPopUp _ _ _ _ a) = a;

set_value (UIPopUp _ _ v _ _) new::int = put v new;


type check_box (UICheckBox code::int name::string value action) = true;

const check_box_type_tag = 103;
type_tag _::check_box = check_box_type_tag;

CheckBox name::string value::int action =
  UICheckBox next_code name (ref value) action;

code    (UICheckBox c _ _ _) = c;
name    (UICheckBox _ n _ _) = n;
value   (UICheckBox _ _ v _) = get v;
action  (UICheckBox _ _ _ a) = a;

set_value (UICheckBox _ _ v _) new::int = put v new;

type label (UILabel code::int name::string value action) = true;

const label_type_tag = 104;
type_tag _::label = label_type_tag;

Label name::string value::string = 
  UILabel next_code name (ref value) (\x -> x);

SingleLabel name::string =
  UILabel next_code name "" (\x -> x);

ActionLabel name::string value action =
  UILabel next_code name (ref value) action;

code   (UILabel c _ _ _) = c;
name   (UILabel _ n _ _) = n;
value  (UILabel _ _ v _) = get v;
action (UILabel _ _ _ a) = a;

set_value (UILabel _ _ v _) new::int = put v new;

is_widget _::slider = true;
is_widget _::segmented = true;
is_widget _::pop_up = true;
is_widget _::check_box = true;
is_widget _::label = true;
is_widget _ = false;

no_action _ = false;


// native support 

// signals

send w::widget change::int    = signal (code w) change;
send w::widget change::string = signal (code w) change;





