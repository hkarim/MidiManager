#! --nosymbolic

using midi;
using ui;
using dict;
using native;
using system;

const chords = {
      maj      => [0,4,7],
      maj7     => [0,4,7,11],
      maj9     => [0,4,7,11,14],
      maj11    => [0,4,7,11,14,17],
      maj13    => [0,4,7,11,14,17,21],
      maj_add2 => [0,2,4,7],
      maj_add4 => [0,4,5,7],
      maj_add9 => [0,4,7,14],
      add2     => [0,2,4,7],
      add4     => [0,4,5,7],
      add9     => [0,4,7,14],
      m        => [0,3,7],
      m6       => [0,3,7,9],
      m7       => [0,3,7,10],
      mMaj7    => [0,3,7,11],
      m9       => [0,3,7,10,14],
      m11      => [0,3,7,10,14,17],
      m13      => [0,3,7,10,14,17,21],
      m7_flat5 => [0,3,6,10],
      m7b5    => [0,3,6,10],
      aug      => [0,4,8],
      aug_maj7 => [0,4,8,11],
      aug7     => [0,4,8,10],
      aug_min7 => [0,4,8,10],
      dim      => [0,3,6],
      dim7     => [0,3,6,9],
      half_dim => [0,3,6,10],
      sixth    => [0,4,7,9],
      six_nine => [0,4,7,9,14],
      seventh        => [0,4,7,10], 
      dom7           => [0,4,7,10],
      ninth          => [0,4,7,10,14],
      eleventh       => [0,4,7,10,14,17],
      thirteenth     => [0,4,7,10,14,17,21],
      seventh_sharp9 => [0,4,7,10,15],
      seventh_flat9  => [0,4,7,10,13],
      seventh_b9     => [0,4,7,10,13],
      seventh_sharp5 => [0,4,8,10],
      seventh_flat5  => [0,4,6,10],
      seventh_b5     => [0,4,6,10],
      seventh_sus2 => [0,2,7,10],
      seventh_sus4 => [0,5,7,10],
      fifth =>  [0,7],
      sus2 =>   [0,2,7],
      sus4 =>   [0,5,7]
};


let scale =  ["C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B"];


// Chord Degrees and supporting functions
let tonic = dict ["Maj" => chords!maj, "Maj7" => chords!maj7, "Maj9" => chords!maj9, "Maj11" => chords!maj11, "Maj13" => chords!maj13];
let tonic_keys = ["Maj", "Maj7", "Maj9", "Maj11", "Maj13"];

let supertonic = dict ["m" => chords!m, "m6" => chords!m6, "m7" => chords!m7, "m9" => chords!m9, "m11" => chords!m11];
let supertonic_keys = ["m", "m6", "m7", "m9", "m11"];

let mediant = dict ["m" => chords!m, "m7" => chords!m7];
let mediant_keys = ["m", "m7"];

let subdominant = dict ["Maj" => chords!maj, "Maj7" => chords!maj7, "Maj9" => chords!maj9, "Maj13" => chords!maj13];
let subdominant_keys = ["Maj", "Maj7", "Maj9", "Maj13"];

let dominant = dict ["Maj" => chords!maj, "7"=> chords!dom7, "11"=> chords!eleventh, "sus4"=> chords!sus4, "13"=> chords!thirteenth];
let dominant_keys = ["Maj", "7", "11", "sus4", "13"];

let submediant = dict ["m" => chords!m, "m7"=> chords!m7, "m9"=> chords!m9, "m11"=> chords!m11];
let submediant_keys = ["m", "m7", "m9", "m11"];

let leading = dict ["m7b5" => chords!m7b5];
let leading_keys = ["m7b5"];


// User Interface

// Constants
const desc =
  "Choose your scale root and chorder will play a chord for each note in this scale. " +
  "You can also choose either the chorder will add a root base note to chord in a lower octave or not " +
  "by selecting Add Base Note flag. The type of the chord played for a note can be customized. " +
  "For example, in a C major scale, you can select to play C maj, C maj7, C maj11 etc. using the Tonic options, " +
  "the same goes for supertonic (D note in a C major scale) and so on";



// UI Handlers
format_chords =
 chord_names with

    scale_note index = 
        if (index+transposition) <= 11 
        then scale ! (index+transposition)
        else scale ! (index+transposition-12); 

    tonic_c         = (scale_note 0) + ( tonic_keys ! tonic_chord );
    supertonic_c    = (scale_note 2) + ( supertonic_keys ! supertonic_chord );
    mediant_c       = (scale_note 4) + ( mediant_keys ! mediant_chord );
    subdominant_c   = (scale_note 5) + ( subdominant_keys ! subdominant_chord );
    dominant_c      = (scale_note 7) + ( dominant_keys ! dominant_chord );
    submediant_c    = (scale_note 9) + ( submediant_keys ! submediant_chord );
    leading_c       = (scale_note 11) + ( leading_keys ! leading_chord );

    chord_names = 
        tonic_c + " " + 
        supertonic_c + " " + 
        mediant_c + " " + 
        subdominant_c + " " +
        dominant_c + " " +
        submediant_c + " " +
        leading_c;
  end;

change_chords = ui::send chords_control format_chords;


// Controls, MUST be variables (defined using let keyword) for UI signals and callbacks to work
let chords_control = ui::Label "Chords" "";
let transposition_control = ui::Segmented "Scale Tonic" 0 scale (\_ -> change_chords);
let tonic_control = ui::Segmented "Tonic" 0 tonic_keys (\_ -> change_chords);
let supertonic_control = ui::Segmented "Supertonic" 0 supertonic_keys (\_ -> change_chords);
let mediant_control = ui::Segmented "Mediant" 0 mediant_keys (\_ -> change_chords);
let subdominant_control = ui::Segmented "Subdominant" 0 subdominant_keys (\_ -> change_chords);
let dominant_control = ui::Segmented "Dominant" 0 dominant_keys (\_ -> change_chords);
let submediant_control = ui::Segmented "Submediant" 0 submediant_keys (\_ -> change_chords);
let leading_control = ui::Segmented "Leading" 0 leading_keys (\_ -> change_chords);
let base_note_control = ui::CheckBox "Add Base Note" 1 ui::no_action;
let last_chord_control = ui::Label "Last Recognized Chord" "None";
let desc_control = ui::Label "Description" desc;
let author_control = ui::Label "Author" "Hossam Karim - (c) 2014";

transposition     = ui::value transposition_control;
base_note         = ui::value base_note_control;
tonic_chord       = ui::value tonic_control;
supertonic_chord  = ui::value supertonic_control;
mediant_chord     = ui::value mediant_control;
subdominant_chord = ui::value subdominant_control;
dominant_chord    = ui::value dominant_control;
submediant_chord  = ui::value submediant_control;
leading_chord     = ui::value leading_control;


// UI Callback
create_ui =
     [
        transposition_control,
        base_note_control,
        chords_control,
        tonic_control,
        supertonic_control,
        mediant_control,
        subdominant_control,
        dominant_control,
        submediant_control,
        leading_control,
        last_chord_control,
        desc_control,
        author_control
     ];
  
save_state =
  { 
    "transposition_control" => transposition,
    "base_note_control" => base_note,
    "tonic_control" => tonic_chord,
    "supertonic_control" => supertonic_chord,
    "mediant_control" => mediant_chord,
    "subdominant_control" => subdominant_chord,
    "dominant_control" => dominant_chord,
    "submediant_control" => submediant_chord,
    "leading_control" => leading_chord
  };

restore_state r::record =
  restore_controls with
    restore_controls = map set_state (keys r);
    set_state key =
       case key of
          "transposition_control" = ui::set_value transposition_control (r!key);
          "base_note_control"     = ui::set_value base_note_control (r!key); 
          "tonic_control"         = ui::set_value tonic_control (r!key);
          "supertonic_control"    = ui::set_value supertonic_control (r!key);
          "mediant_control"       = ui::set_value mediant_control (r!key);
          "subdominant_control"   = ui::set_value subdominant_control (r!key);
          "dominant_control"      = ui::set_value dominant_control (r!key);
          "submediant_control"    = ui::set_value submediant_control (r!key);
          "leading_control"       = ui::set_value leading_control (r!key);
          _                       = puts $ "unkown property: " + key;
       end;
  end;

on_editor_loaded = puts "Editor Ready" $$ change_chords;
  
  

// Midi Processing
process_midi_buffer buf::midi_buffer_t = 
  output when
    [notes, other] = split_notes buf;
    output = (catmap process notes) + other;
  end;

split_notes xs::list = 
  foldl splitter [[],[]] xs with
     splitter [notes, other] t = 
       if is_note_on_or_off t then [notes + [t], other] else [notes, other + [t]];
  end;

process t::event_position_t = if is_note_on_or_off t then chord_on_off (pick_interval t) t else [];

chord_name t::event_position_t =
  result with
    nor = ((get_note t) - transposition) mod 12;
    name = scale ! ( (get_note t) mod 12 );
    result =
      case nor of
        0 = name + (tonic_keys ! tonic_chord);
        2 = name + (supertonic_keys ! supertonic_chord);
        4 = name + (mediant_keys ! mediant_chord); 
        5 = name + (subdominant_keys ! subdominant_chord);
        7 = name + (dominant_keys ! dominant_chord);
        9 = name + (submediant_keys ! submediant_chord);
        11= name + (leading_keys ! leading_chord);
        _ = "";
      end;
  end;

pick_interval t::event_position_t = 
  result with
      nor = ((get_note t) - transposition) mod 12;
      name = scale ! nor;
      intervals = 
      case nor of
          0 = tonic ! (tonic_keys ! tonic_chord);
          2 = supertonic ! (supertonic_keys ! supertonic_chord);
          4 = mediant ! (mediant_keys ! mediant_chord);  
          5 = subdominant ! (subdominant_keys ! subdominant_chord);
          7 = dominant ! (dominant_keys ! dominant_chord);  
          9 = submediant ! (submediant_keys ! submediant_chord);
          11= leading ! (leading_keys ! leading_chord);  
          _ = [];
      end;
      result = if base_note == 1 then (-12 : intervals) else intervals;
  end;

chord_on_off intervals::list t::event_position_t = 
  ui::send last_chord_control (chord_name t) $$
  map (transpose_note t) intervals; 

