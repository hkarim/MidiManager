#! --nosymbolic

using midi;
using dict;


interface Device with
  apply d::Device buf;
end;

infixl 1100 |>;
def buf |> device = apply device buf;


// Chorder
type chorder_t (Chorder transposition::int chord_dict::dict) = true;

const major        = [0,4,7];
const major7       = [0,4,7,11];
const dom7         = [0,4,7,10];
const minor        = [0,3,7];
const minor7       = [0,3,7,10];
const minor7b5     = [0,3,6,10];


apply (Chorder transposition chord_dict) buf::midi_buffer_t =
  output with

      split_notes xs::list = 
          foldl splitter [[],[]] xs with
              splitter [notes, other] t = 
                  if is_note_on_or_off t then [notes + [t], other] else [notes, other + [t]];
          end;

      pick_interval t::event_position_t = 
          result with
              normalized_note = ((get_note t) - transposition) mod 12;
              result = if member chord_dict normalized_note then chord_dict!normalized_note else [];
          end;

      chord_on_off intervals::list t::event_position_t = map (transpose_note t) intervals; 

      process t::event_position_t = if is_note_on_or_off t then chord_on_off (pick_interval t) t else [];

      output = 
          (catmap process notes) + other when
              [notes, other] = split_notes buf;
          end;
  end;




